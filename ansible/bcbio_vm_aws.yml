# Create an AWS AMI with bcbio_vm and data pre-loaded
---
- name: Create EC2 instance
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Launch instance
      local_action:
        module: ec2
        key_name: "{{ keypair }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        region: "{{ region }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: '{{ bcbio_vm_install["volume_size"] }}'
            delete_on_termination: true
        wait: true
      register: ec2
    - name: Add new instance to host group
      local_action: add_host hostname={{ item.public_ip }} groupname=launched
      with_items: ec2.instances
    - name: Wait for SSH to come up
      local_action: wait_for host={{ item.public_dns_name }} port=22 delay=15 timeout=320 state=started
      with_items: ec2.instances
    - name: Get rid of SSH "Are you sure you want to continue connecting (yes/no)?" query
      shell: ssh-keyscan {{ item.public_ip }} >> $HOME/.ssh/known_hosts
      with_items: ec2.instances

- name: Setup docker
  hosts: launched
  connection: paramiko
  gather_facts: True
  roles:
    - docker

- name: Install bcbio_vm and data on AWS instance
  hosts: launched
  gather_facts: True
  vars:
    anaconda_dir: "~{{ansible_user_id}}/install/bcbio-vm/anaconda"
  roles:
    - gof3r
    - bcbio_vm_install

- name: Create AWS AMI
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Create bcbio-vm AMI
      #when: bcbio_vm_doinstall|success
      local_action:
        module: ec2_ami
        instance_id: ec2.instances[0]
        wait: yes
        region: '{{ region }}'
        name: "bcbio-vm ({{ ansible_date_time['iso8601'] }})"
        register: bcbiovm_ami

- name: Terminate EC2 instance
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Terminate instances that were previously launched
      local_action:
        module: ec2
        state: 'absent'
        region: '{{ region }}'
        instance_ids: '{{ ec2.instance_ids }}'
